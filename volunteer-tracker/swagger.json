{
  "openapi": "3.0.3",
  "info": {
    "title": "Volunteer Tracking API",
    "description": "API for managing volunteers and opportunities with GitHub OAuth authentication.",
    "version": "1.0.0"
  },
  "tags": [
    { "name": "default", "description": "Default API operations" },
    { "name": "Volunteer Tracking API", "description": "Volunteer and opportunity management (requires OAuth login)" },
    { "name": "Authentication", "description": "GitHub OAuth login and logout" }
  ],
  "components": {
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/auth/github",
            "tokenUrl": "/auth/github/callback",
            "scopes": { "user:email": "Access user email and profile" }
          }
        }
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "phoneNumber": { "type": "string", "pattern": "^\\(?[0-9]{3}\\)?[-.]?[0-9]{3}[-.]?[0-9]{4}$" },
          "accountType": { "type": "string", "enum": ["student", "admin", "organizer"] },
          "githubId": { "type": "string", "nullable": true },
          "graduationYear": { "type": "integer", "nullable": true, "minimum": 1900, "maximum": 2035 },
          "createdAt": { "type": "string", "format": "date-time" },
          "isDeleted": { "type": "boolean" },
          "deleteDate": { "type": "string", "format": "date-time", "nullable": true }
        },
        "required": ["_id", "firstName", "lastName", "email", "phoneNumber", "accountType", "createdAt", "isDeleted"]
      },
      "UserInput": {
        "type": "object",
        "properties": {
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "phoneNumber": { "type": "string", "pattern": "^\\(?[0-9]{3}\\)?[-.]?[0-9]{3}[-.]?[0-9]{4}$" },
          "accountType": { "type": "string", "enum": ["student", "admin", "organizer"] },
          "graduationYear": { "type": "integer", "nullable": true, "minimum": 1900, "maximum": 2035 }
        },
        "required": ["firstName", "lastName", "email", "phoneNumber", "accountType"]
      },
      "Opportunity": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "organizerId": { "type": "string" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "location": { "type": "string" },
          "date": { "type": "string", "format": "date" },
          "time": { "type": "string", "pattern": "^([01]\\d|2[0-3]):[0-5]\\d$" },
          "duration": { "type": "number", "minimum": 0 },
          "createdAt": { "type": "string", "format": "date-time" },
          "isDeleted": { "type": "boolean" },
          "deleteDate": { "type": "string", "format": "date-time", "nullable": true }
        },
        "required": ["_id", "organizerId", "title", "description", "location", "date", "time", "duration", "createdAt", "isDeleted"]
      },
      "OpportunityInput": {
        "type": "object",
        "properties": {
          "organizerId": { "type": "string" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "location": { "type": "string" },
          "date": { "type": "string", "format": "date" },
          "time": { "type": "string", "pattern": "^([01]\\d|2[0-3]):[0-5]\\d$" },
          "duration": { "type": "number", "minimum": 0 }
        },
        "required": ["organizerId", "title", "description", "location", "date", "time", "duration"]
      },
      "UserOpportunity": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "userId": { "type": "string" },
          "opportunityId": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" },
          "isDeleted": { "type": "boolean" },
          "deleteDate": { "type": "string", "format": "date-time", "nullable": true },
          "approvedBy": { "type": "string", "nullable": true },
          "approvedOn": { "type": "string", "format": "date-time", "nullable": true }
        },
        "required": ["_id", "userId", "opportunityId", "createdAt", "isDeleted"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "error": { "type": "string" }
        },
        "required": ["message"]
      }
    }
  },
  "paths": {
    "/": {
      "get": {
        "tags": ["default"],
        "summary": "Welcome message",
        "description": "Returns a welcome message for the API",
        "responses": {
          "200": {
            "description": "Welcome message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Welcome to the Volunteer Tracking API" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/github": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Initiate GitHub OAuth login",
        "description": "Redirects to GitHub for OAuth authentication.",
        "responses": {
          "302": { "description": "Redirect to GitHub OAuth" },
          "401": { "description": "Authentication failed" }
        }
      }
    },
    "/auth/github/callback": {
      "get": {
        "tags": ["Authentication"],
        "summary": "GitHub OAuth callback",
        "description": "Handles GitHub OAuth callback and returns user data.",
        "responses": {
          "200": {
            "description": "GitHub login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Login successful" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": { "$ref": "#components/schemas/User" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "GitHub authentication failed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Log out user",
        "description": "Log out user by clearing session.",
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Logout successful" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to logout",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/auth/login/failed": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Handle failed OAuth login",
        "description": "Returns error for failed OAuth login attempts.",
        "responses": {
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/auth/success": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Confirm successful login",
        "description": "Returns user data after successful OAuth login.",
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Login successful" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": { "$ref": "#components/schemas/User" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "security": [{ "OAuth2": [] }],
        "tags": ["Volunteer Tracking API"],
        "summary": "Fetch all users",
        "description": "Fetch all users from the database. Requires OAuth authentication.",
        "responses": {
          "200": {
            "description": "Users fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Users fetched successfully" },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#components/schemas/User" }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No users found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to fetch users",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "security": [{ "OAuth2": [] }],
        "tags": ["Volunteer Tracking API"],
        "summary": "Create a new user",
        "description": "Create a new user in the database. Requires OAuth authentication.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#components/schemas/UserInput" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User created successfully" },
                    "data": { "$ref": "#components/schemas/User" }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to create user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "security": [{ "OAuth2": [] }],
        "tags": ["Volunteer Tracking API"],
        "summary": "Fetch a user by ID",
        "description": "Fetch a user by ID from the database. Requires OAuth authentication.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User fetched successfully" },
                    "data": { "$ref": "#components/schemas/User" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to fetch user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "put": {
        "security": [{ "OAuth2": [] }],
        "tags": ["Volunteer Tracking API"],
        "summary": "Update an existing user",
        "description": "Update an existing user in the database. Requires OAuth authentication.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#components/schemas/UserInput" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User updated successfully" },
                    "data": { "$ref": "#components/schemas/User" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or user ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to update user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "security": [{ "OAuth2": [] }],
        "tags": ["Volunteer Tracking API"],
        "summary": "Soft delete a user",
        "description": "Soft deletes a user by ID. Requires OAuth authentication.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User deleted successfully" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "matchedCount": { "type": "integer", "example": 1 },
                        "modifiedCount": { "type": "integer", "example": 1 }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to delete user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/opportunities": {
      "get": {
        "security": [{ "OAuth2": [] }],
        "tags": ["Volunteer Tracking API"],
        "summary": "Fetch all opportunities",
        "description": "Fetch all opportunities from the database. Requires OAuth authentication.",
        "responses": {
          "200": {
            "description": "Opportunities fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Opportunities fetched successfully" },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#components/schemas/Opportunity" }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No opportunities found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to fetch opportunities",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "security": [{ "OAuth2": [] }],
        "tags": ["Volunteer Tracking API"],
        "summary": "Create a new opportunity",
        "description": "Create a new opportunity in the database. Requires OAuth authentication.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#components/schemas/OpportunityInput" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Opportunity created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Opportunity created successfully" },
                    "data": { "$ref": "#components/schemas/Opportunity" }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to create opportunity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/opportunities/{id}": {
      "get": {
        "security": [{ "OAuth2": [] }],
        "tags": ["Volunteer Tracking API"],
        "summary": "Fetch an opportunity by ID",
        "description": "Fetch an opportunity by ID from the database. Requires OAuth authentication.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the opportunity"
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Opportunity fetched successfully" },
                    "data": { "$ref": "#components/schemas/Opportunity" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid opportunity ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Opportunity not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to fetch opportunity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "put": {
        "security": [{ "OAuth2": [] }],
        "tags": ["Volunteer Tracking API"],
        "summary": "Update an existing opportunity",
        "description": "Update an existing opportunity in the database. Requires OAuth authentication.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the opportunity"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#components/schemas/OpportunityInput" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Opportunity updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Opportunity updated successfully" },
                    "data": { "$ref": "#components/schemas/Opportunity" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or opportunity ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Opportunity not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to update opportunity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "security": [{ "OAuth2": [] }],
        "tags": ["Volunteer Tracking API"],
        "summary": "Soft delete an opportunity",
        "description": "Soft deletes an opportunity by ID. Requires OAuth authentication.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the opportunity"
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Opportunity deleted successfully" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "matchedCount": { "type": "integer", "example": 1 },
                        "modifiedCount": { "type": "integer", "example": 1 }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid opportunity ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Opportunity not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to delete opportunity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/events/{userId}/opportunities": {
      "get": {
        "security": [{ "OAuth2": [] }],
        "tags": ["Volunteer Tracking API"],
        "summary": "Fetch all opportunities for a specific user",
        "description": "Fetch all opportunities for a specific user from the database. Requires OAuth authentication.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User opportunities fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User opportunities fetched successfully" },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#components/schemas/UserOpportunity" }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No opportunities found for user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Invalid user ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to fetch user opportunities",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/events/{userId}/opportunities/{opportunityId}": {
      "post": {
        "security": [{ "OAuth2": [] }],
        "tags": ["Volunteer Tracking API"],
        "summary": "Sign up a user for an opportunity",
        "description": "Sign up a user for an opportunity. Requires OAuth authentication.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the user"
          },
          {
            "in": "path",
            "name": "opportunityId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the opportunity"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully signed up for opportunity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Successfully signed up for opportunity" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "insertedId": { "type": "string", "example": "507f1f77bcf86cd799439011" }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid user ID or opportunity ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to sign up for opportunity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/events/{userId}/opportunities/{userOpportunityId}": {
      "put": {
        "security": [{ "OAuth2": [] }],
        "tags": ["Volunteer Tracking API"],
        "summary": "Approve volunteered hours",
        "description": "Approves volunteered hours for a user-opportunity record. Requires OAuth authentication.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the approving user"
          },
          {
            "in": "path",
            "name": "userOpportunityId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the user-opportunity record"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully approved hours",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Successfully approved hours" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "matchedCount": { "type": "integer", "example": 1 },
                        "modifiedCount": { "type": "integer", "example": 1 }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Invalid user ID or user opportunity ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to approve hours",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/events/{userOpportunityId}": {
      "delete": {
        "security": [{ "OAuth2": [] }],
        "tags": ["Volunteer Tracking API"],
        "summary": "Withdraw from an opportunity",
        "description": "Soft deletes a user-opportunity record by its ID. Requires OAuth authentication.",
        "parameters": [
          {
            "in": "path",
            "name": "userOpportunityId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the user-opportunity record"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully withdrew from opportunity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Successfully withdrew from opportunity" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "matchedCount": { "type": "integer", "example": 1 },
                        "modifiedCount": { "type": "integer", "example": 1 }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Invalid userOpportunityId format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "User-opportunity record not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to withdraw from opportunity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    }
  }
}