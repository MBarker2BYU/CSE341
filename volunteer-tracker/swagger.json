{
  "openapi": "3.0.3",
  "info": {
    "title": "Volunteer Tracking API",
    "description": "API for managing volunteers and opportunities, with a default welcome endpoint.",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "default",
      "description": "Default API operations from default-controller"
    },
    {
      "name": "Volunteer Tracking API",
      "description": "Volunteer and opportunity management operations from volunteer-tracking-api-controller"
    }
  ],
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "description": "MongoDB ObjectId of the user" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "phoneNumber": {
            "type": "string",
            "pattern": "^\\(?[0-9]{3}\\)?[-.]?[0-9]{3}[-.]?[0-9]{4}$",
            "description": "Must be (123)456-7890, 1234567890, 123-456-7890, or 123.456.7890"
          },
          "accountType": {
            "type": "string",
            "enum": ["student", "admin", "organizer"],
            "description": "Must be one of student, admin, or organizer"
          },
          "graduationYear": {
            "type": "integer",
            "nullable": true,
            "minimum": 1900,
            "maximum": 2035,
            "description": "Required for students, optional otherwise"
          },
          "createdAt": { "type": "string", "format": "date-time" },
          "isDeleted": { "type": "boolean" },
          "deleteDate": { "type": "string", "format": "date-time", "nullable": true }
        },
        "required": ["_id", "firstName", "lastName", "email", "phoneNumber", "accountType", "createdAt", "isDeleted"]
      },
      "UserInput": {
        "type": "object",
        "properties": {
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "password": {
            "type": "string",
            "description": "Must be 12+ characters with 1 uppercase, 1 lowercase, 1 number, 1 special character (@$!%*?&). Required for POST, optional for PUT."
          },
          "phoneNumber": {
            "type": "string",
            "pattern": "^\\(?[0-9]{3}\\)?[-.]?[0-9]{3}[-.]?[0-9]{4}$",
            "description": "Must be (123)456-7890, 1234567890, 123-456-7890, or 123.456.7890"
          },
          "accountType": {
            "type": "string",
            "enum": ["student", "admin", "organizer"],
            "description": "Must be one of student, admin, or organizer"
          },
          "graduationYear": {
            "type": "integer",
            "nullable": true,
            "minimum": 1900,
            "maximum": 2035,
            "description": "Required for students, optional otherwise"
          }
        },
        "required": ["firstName", "lastName", "email", "phoneNumber", "accountType"]
      },
      "Opportunity": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "description": "MongoDB ObjectId of the opportunity" },
          "organizerId": { "type": "string", "description": "MongoDB ObjectId referencing the organizer user" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "location": { "type": "string" },
          "date": {
            "type": "string",
            "format": "date",
            "description": "ISO 8601 date string (e.g., YYYY-MM-DD)"
          },
          "time": {
            "type": "string",
            "pattern": "^([01]\\d|2[0-3]):[0-5]\\d$",
            "description": "Time in HH:MM 24-hour format"
          },
          "duration": {
            "type": "number",
            "minimum": 0,
            "description": "Duration in hours, must be non-negative"
          },
          "createdAt": { "type": "string", "format": "date-time" },
          "isDeleted": { "type": "boolean" },
          "deleteDate": { "type": "string", "format": "date-time", "nullable": true }
        },
        "required": ["_id", "organizerId", "title", "description", "location", "date", "time", "duration", "createdAt", "isDeleted"]
      },
      "OpportunityInput": {
        "type": "object",
        "properties": {
          "organizerId": { "type": "string", "description": "MongoDB ObjectId referencing the organizer user" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "location": { "type": "string" },
          "date": {
            "type": "string",
            "format": "date",
            "description": "ISO 8601 date string (e.g., YYYY-MM-DD)"
          },
          "time": {
            "type": "string",
            "pattern": "^([01]\\d|2[0-3]):[0-5]\\d$",
            "description": "Time in HH:MM 24-hour format"
          },
          "duration": {
            "type": "number",
            "minimum": 0,
            "description": "Duration in hours, must be non-negative"
          }
        },
        "required": ["organizerId", "title", "description", "location", "date", "time", "duration"]
      },
      "UserOpportunity": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "description": "MongoDB ObjectId of the user-opportunity record" },
          "userId": { "type": "string", "description": "MongoDB ObjectId referencing the user" },
          "opportunityId": { "type": "string", "description": "MongoDB ObjectId referencing the opportunity" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Date the user signed up for the opportunity" },
          "isDeleted": { "type": "boolean", "description": "Indicates if the signup is soft-deleted" },
          "deleteDate": { "type": "string", "format": "date-time", "nullable": true, "description": "Date of soft deletion, null if not deleted" },
          "approvedBy": { "type": "string", "nullable": true, "description": "MongoDB ObjectId of the user who approved the hours, null if not approved" },
          "approvedOn": { "type": "string", "format": "date-time", "nullable": true, "description": "Date the hours were approved, null if not approved" }
        },
        "required": ["_id", "userId", "opportunityId", "createdAt", "isDeleted"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Error message" },
          "error": { "type": "string", "example": "Detailed error description" }
        },
        "required": ["message", "error"]
      }
    }
  },
  "paths": {
    "/": {
      "get": {
        "tags": ["default"],
        "summary": "Welcome message",
        "description": "Returns a welcome message indicating the Volunteer Tracker API is running and the database connection status.",
        "responses": {
          "200": {
            "description": "API is running and database is connected",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Volunteer Tracker API is running! - Database 'volunteer-db' is connected."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": ["Volunteer Tracking API"],
        "summary": "Get all users",
        "description": "Retrieves a list of all users (non-deleted).",
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Users fetched successfully" },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/User" }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No users found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to fetch users",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Volunteer Tracking API"],
        "summary": "Create a new user",
        "description": "Creates a new user with the provided details.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserInput" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User created successfully" },
                    "data": { "$ref": "#/components/schemas/User" }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to create user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": ["Volunteer Tracking API"],
        "summary": "Get user by ID",
        "description": "Retrieves a user by their ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User fetched successfully" },
                    "data": { "$ref": "#/components/schemas/User" }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid user ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to fetch user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Volunteer Tracking API"],
        "summary": "Update user by ID",
        "description": "Updates a user's details by their ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserInput" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User updated successfully" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "matchedCount": { "type": "integer", "example": 1 },
                        "modifiedCount": { "type": "integer", "example": 1 }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid input or user ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to update user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Volunteer Tracking API"],
        "summary": "Delete user by ID",
        "description": "Soft deletes a user by their ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User deleted successfully" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "matchedCount": { "type": "integer", "example": 1 },
                        "modifiedCount": { "type": "integer", "example": 1 }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid user ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to delete user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/opportunities": {
      "get": {
        "tags": ["Volunteer Tracking API"],
        "summary": "Get all opportunities",
        "description": "Retrieves a list of all opportunities (non-deleted).",
        "responses": {
          "200": {
            "description": "List of opportunities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Opportunities fetched successfully" },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Opportunity" }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No opportunities found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to fetch opportunities",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Volunteer Tracking API"],
        "summary": "Create a new opportunity",
        "description": "Creates a new opportunity with the provided details.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OpportunityInput" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Opportunity created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Opportunity created successfully" },
                    "data": { "$ref": "#/components/schemas/Opportunity" }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to create opportunity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/opportunities/{id}": {
      "get": {
        "tags": ["Volunteer Tracking API"],
        "summary": "Get opportunity by ID",
        "description": "Retrieves an opportunity by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the opportunity"
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Opportunity fetched successfully" },
                    "data": { "$ref": "#/components/schemas/Opportunity" }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid opportunity ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Opportunity not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to fetch opportunity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Volunteer Tracking API"],
        "summary": "Update opportunity by ID",
        "description": "Updates an opportunity's details by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the opportunity"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OpportunityInput" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Opportunity updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Opportunity updated successfully" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "matchedCount": { "type": "integer", "example": 1 },
                        "modifiedCount": { "type": "integer", "example": 1 }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid input or opportunity ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to update opportunity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Volunteer Tracking API"],
        "summary": "Delete opportunity by ID",
        "description": "Soft deletes an opportunity by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the opportunity"
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Opportunity deleted successfully" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "matchedCount": { "type": "integer", "example": 1 },
                        "modifiedCount": { "type": "integer", "example": 1 }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid opportunity ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Opportunity not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to delete opportunity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/events/{userId}/opportunities": {
      "get": {
        "tags": ["Volunteer Tracking API"],
        "summary": "Get user opportunities",
        "description": "Retrieves opportunities signed up by a user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User opportunities fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User opportunities fetched successfully" },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/UserOpportunity" }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid user ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "No opportunities found for user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to fetch user opportunities",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/events/{userId}/opportunities/{opportunityId}": {
      "post": {
        "tags": ["Volunteer Tracking API"],
        "summary": "Sign up for an opportunity",
        "description": "Signs a user up for an opportunity using their IDs.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the user"
          },
          {
            "in": "path",
            "name": "opportunityId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the opportunity"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully signed up for opportunity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Successfully signed up for opportunity" },
                    "data": { "$ref": "#/components/schemas/UserOpportunity" }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid user ID or opportunity ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to sign up for opportunity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/events/{userId}/opportunities/{userOpportunityId}": {
      "put": {
        "tags": ["Volunteer Tracking API"],
        "summary": "Approve volunteered hours",
        "description": "Approves volunteered hours for a user-opportunity record.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the approving user"
          },
          {
            "in": "path",
            "name": "userOpportunityId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the user-opportunity record"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully approved hours",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Successfully approved hours" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "matchedCount": { "type": "integer", "example": 1 },
                        "modifiedCount": { "type": "integer", "example": 1 }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid user ID or user opportunity ID format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to approve hours",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/events/{userOpportunityId}": {
      "delete": {
        "tags": ["Volunteer Tracking API"],
        "summary": "Withdraw from an opportunity",
        "description": "Soft deletes a user-opportunity record by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "userOpportunityId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
            "description": "MongoDB ObjectId of the user-opportunity record"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully withdrew from opportunity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Successfully withdrew from opportunity" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "matchedCount": { "type": "integer", "example": 1 },
                        "modifiedCount": { "type": "integer", "example": 1 }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid userOpportunityId format",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "User-opportunity record not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Failed to withdraw from opportunity",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    }
  }
}